setenv create_bcb 'nand erase.part vf-bcb && writebcb 0x20000 0x20000'
setenv update_configblock 'fatload ${interface} 0:1 ${loadaddr} ${board_name}/configblock.bin && nand write ${loadaddr} 0x800 ${filesize}'

setenv u-boot-env-size 0x1F000

# Migrate to UBI volume based boot schema
# Create dual bank update system with dual u-boot-env to avoid corruption
# kernel has a size of 9.75 MiB
# dtb has a size of 248 KiB
# appfs has a size of 10 MiB
# u-boot-env and u-boot-env-redund have a size of 124KiB
# rootfs has a size of 221.5 MiB
setenv prepare_kernel_fdt  'ubi create kernel-0 0x9C0000 static && ubi create dtb-0 0x20000 static && ubi create kernel-1 0x9C0000 static && ubi create dtb-1 0x20000 static'
setenv prepare_appfs 'ubi create appfs-0 0x0A00000 dynamic && ubi create appfs-1 0x0A00000 dynamic'
setenv prepare_uboot_env 'ubi create u-boot-env ${u-boot-env-size} dynamic && ubi create u-boot-env-redund ${u-boot-env-size} dynamic'
setenv prepare_rootfs 'ubi create rootfs-0 0xDD80000 dynamic && ubi create rootfs-1 0xDD80000 dynamic'

# Build default memory layout
# - remove u-boot-env mtd partition (to upgrade old mtd partitionning)
# - recreate ubi to clean volumes
setenv create_memory_layout ' \
	echo Create memory layout \
	ubi detach \
	mtdparts del ubi \
	mtdparts del u-boot-env \
	mtdparts add nand0.2 - ubi \
	nand erase.part ubi \
	ubi part ubi \
	echo UBI partition cleaned \
	run prepare_kernel_fdt \
	run prepare_appfs \
	run prepare_uboot_env \
	run prepare_rootfs \
	'

# Checks that there is a UBI partition and that it has the expected layout
# Warning: this variable is kept on a single line because multiline variable seems not to work when called from an if statement
setenv check_memory_layout 'echo Check memory layout && ubi check appfs-0 && ubi check appfs-1 && ubi check rootfs-0 && ubi check rootfs-1 && ubi check kernel-0 && ubi check kernel-1 && ubi check dtb-0 && ubi check dtb-1 && ubi check u-boot-env && ubi check u-boot-env-redund'

# Check if u-boot-env partition exists in mtd (try to replace u-boot-env by u-boot-env in mtdparts variables. If error is reported, it is that u-boot-env string is not found)
setenv check_mtd_ubootenv 'setexpr result gsub u-boot-env u-boot-env ${mtdparts}'

setenv update_uboot 'echo Update u-boot and erase u-boot-env && fatload ${interface} 0:1 ${loadaddr} ${board_name}/u-boot-nand.imx && nand erase.part u-boot && nand write ${loadaddr} u-boot && echo Clear u-boot-env && mw.b ${loadaddr} 0xFF ${u-boot-env-size} && if ubi check u-boot-env; then ubi write ${loadaddr} u-boot-env ${u-boot-env-size}; echo UBI u-boot-env cleared; fi ; if ubi check u-boot-env-redund; then ubi write ${loadaddr} u-boot-env-redund ${u-boot-env-size}; echo UBI u-boot-env-redund cleared; fi ; if run check_mtd_ubootenv; then nand erase.part u-boot-env; echo MTD u-boot-env cleared; fi'
setenv update_kernel 'echo Update kernel && fatload ${interface} 0:1 ${loadaddr} ${board_name}/zImage && ubi write ${loadaddr} kernel-${bootable_partition} ${filesize}'
setenv update_fdt 'echo Update dtb && fatload ${interface} 0:1 ${loadaddr} ${board_name}/${soc}-colibri-XMF1345-B.dtb && ubi write ${loadaddr} dtb-${bootable_partition} ${filesize}'
setenv update_rootfs 'echo Update rootfs && fatload ${interface} 0:1 ${loadaddr} ${board_name}/ubifs.img && ubi write ${loadaddr} rootfs-${bootable_partition} ${filesize}'
setenv update_appfs 'echo Update appfs && fatload ${interface} 0:1 ${loadaddr} ${board_name}/appfs.img && ubi write ${loadaddr} appfs-${bootable_partition} ${filesize}'

# Update the applications (u-boot, kernel, rootfs, dtb) and the data (appfs)
setenv update_data ' \
	echo Update data (appfs) \
	run update_appfs \
	'

# Update the applications (u-boot, kernel, rootfs, dtb) but not the data (appfs)
setenv update_applications ' \
	echo Update applications (u-boot, kernel, rootfs, dtb) \
	run update_uboot \
	run update_kernel \
	run update_fdt \
	run update_rootfs \
	'

# Upgrade part 1, write new U-Boot, but with old ECC format still...
# Store config block temporarly in memory at kernel_addr_r.
setenv upgrade_part1 'run update_uboot && nand read ${kernel_addr_r} 0x800 0x20 && echo "${upgrade_part1_msg}"'
setenv upgrade_part1_msg 'Successfully updated U-Boot, NAND upgrade required. Enter "reset", interrupt boot process and enter "run setupdate; run upgrade_part2" to complete upgrade.'

# Upgrade part 2, use new ECC format for the whole device...
setenv upgrade_part2 'run create_bcb && nand write ${kernel_addr_r} 0x800 0x20 && run update_uboot && nand erase.part ubi && run update_rootfs && run update_appfs && echo ${upgrade_part2_msg}'
setenv upgrade_part2_msg 'Successfully upgraded module, enter "reset" to restart the module.'

# Call mtdparts to initialize mtdids without changing mtd partition definition to default one. If a new u-boot 
# is used on an old image/mapping, the mtdparts default value may not matches the current nand state
# Warning after an update, the default u-boot environment value will be used because there is no way to keep variable (in the past the variables were stored in MTD partition and they are now stored in UBI volumes).
# fsl_nfc indicates old NAND format (24-bit ECC), start migration process
setenv update ' \
	mtdparts \
	if test "${mtdids}" = "nand0=fsl_nfc"; then \
	  run upgrade_part1 \
	fi; \
	setenv bootable_partition 0 && echo bootable_partition=${bootable_partition} \
	ubi part ubi \
	if run check_memory_layout; then \
	  echo Expect layout found \
	else \
	  echo Layout need to be updated \
	  run create_memory_layout \
	  run update_data \
	fi; \
	run update_applications \
	reset \
	'

echo 'enter "run update" to update the entire module'

